{% extends 'base.html.twig' %}

{% block body %}
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3">
        <h1 class="h2"><i class="fa fa-map-signs"></i> Segment effort: {{ segment.name }}</h1>
    </div>

    <div class="row">
        <div class="col-lg-3 col-md-6 col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fa fa-info-circle"></i> Gegevens:</h5>
                </div>
                <div class="card-body">
                    <p class="card-text">
                        Type: {{ segment.activity_type }}<br>
                        Afstand: {{ (segment.distance / 1000)|number_format(2, ',', '.') }} km<br>
                        Hoogste punt: {{ segment.elevation_high|number_format(1, ',', '.') }} m<br>
                        Laagste punt: {{ segment.elevation_low|number_format(1, ',', '.') }} m<br>
                        Hoogte: {{ segment.total_elevation_gain|number_format(1, ',', '.') }} m<br>
                        Max stijging: {{ segment.maximum_grade|number_format(1, ',', '.') }}%<br>
                        Gem stijging: {{ segment.average_grade|number_format(1, ',', '.') }}%<br>

                        Gemaakt: {{ segment.created_at|date("Y-m-d H:i") }}<br>
                    </p>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fa fa-user-clock"></i> Poging:</h5>
                </div>
                <div class="card-body">
                    <p class="card-text">
                        Afstand: {{ (effort.distance / 1000)|number_format(2, ',', '.') }} km<br>
                        Tijd: {{ effort.elapsed_time|time_format_short }}<br>
                        Snelheid: {{ (effort.distance / effort.elapsed_time * 3.6)|number_format(1, ',', '.') }} km/h<br>
                        Gemiddelde Cadans: {{ effort.average_cadence is defined ? effort.average_cadence|number_format : '-' }}<br>
                        Gemiddeld vermogen: {{ effort.average_watts is defined ? effort.average_watts|number_format : '-' }}<br>
                        Gemiddeld hartslag: {{ effort.average_heartrate is defined ? effort.average_heartrate|number_format : '-' }}<br>
                        Max hartslag: {{ effort.max_heartrate is defined ? effort.max_heartrate|number_format : '-' }}<br>
                        Datum/tijd: {{ effort.start_date_local|date("Y-m-d H:i") }}<br>
                        Positie: {{ effort.pr_rank }}<br>
                    </p>
                </div>
            </div>
        </div>
        <div class="col-lg-6 col-md-12 col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fa fa-map"></i> Kaart:</h5>
                </div>
                <div class="h-100">
                    <div id="map" class="map" style="width: 100%; height: 22vh;"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fa fa-chart-line"></i> Grafieken:
                    </h5>
                </div>
                <div class="h-100">
                    <div id="altitudeDiv"></div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="/assets/css/leaflet.css" />
{% endblock %}

{% block javascripts %}
    <script src="/assets/js/leaflet.js"></script>
    <script type="text/javascript" src="/assets/js/polyline.encoded.js"></script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script>
        $(document).ready( function () {
            $('#effortsTable').DataTable({
                order: [[ 5, 'asc'], [0, 'asc']],
                columns: [
                    { data: "pr_rank" },
                    { data: "datetime" },
                    { data: "distance", orderData: 3 },
                    { data: "distanceRaw", visible: false },
                    { data: "time", orderData: 5 },
                    { data: "timeSeconds", visible: false },
                    { data: "speed", orderData: 7 },
                    { data: "speedRaw", visible: false },
                    { data: "cadence" },
                    { data: "power" },
                    { data: "heartbeat_avg" },
                    { data: "heartbeat_max" },
                    { data: "activity", sortable: false, searchable: false }
                ]
            });

            var data = [
                {% for stream in streams %}
                {% if loop.first %}
                {% else %}
                {
                    x: {{ streams.distance.data }},
                    y: {{ stream.data }},
                    xaxis: 'x' + {{ stream.index }},
                    yaxis: 'y' + {{ stream.index }},
                    type: 'scatter',
                    name: '{{ stream.title }}'
                },
                {% endif %}
                {% endfor %}
            ];
            var layout = {
                legend: {traceorder: 'reversed'},
                {% for stream in streams %}
                {% if loop.first %}
                {% else %}
                'xaxis{{ stream.index }}': {anchor: 'y1' },
                'yaxis{{ stream.index }}': {domain: [{{ (1 / (loop.length -1)) * (stream.index - 1) }}, {{ (1 /  (loop.length -1)) * (stream.index ) }}]},
                {% endif %}
                {% endfor %}
            };
            Plotly.newPlot('altitudeDiv', data, layout);
        });

        var encoded = "{{ segment.map.polyline|replace({'\\': '\\\\'}) }}";
        var coordinates = L.Polyline.fromEncoded(encoded).getLatLngs();

        var map = L.map('map').fitBounds(coordinates);
        L.tileLayer(
            'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 18,
            }).addTo(map);

        L.polyline(
            coordinates,
            {
                color: 'blue',
                weight: 2,
                opacity: .7,
                lineJoin: 'round'
            }
        ).addTo(map);
    </script>
{% endblock %}
